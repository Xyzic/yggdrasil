# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

# branches to build
branches:
  except:
    - gh-pages

os: Visual Studio 2015

#---------------------------------#
#    environment configuration    #
#---------------------------------#

environment:

  PYPI_PASSWORD:
    secure: vixzjLjh1xT6my9x65rOcw==

  global:
    PYTHON: "C:\\Miniconda3-x64"
    INSTALLZMQ: 1
    INSTALLRMQ: 0
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    YGG_RUN_EXAMPLES: 0
    YGG_ENABLE_LONG_TESTS: 0

  erlang_download_url: "http://erlang.org/download/otp_win64_20.2.exe"
  erlang_exe_path: "C:\\Users\\appveyor\\erlang.exe"
  erlang_home_dir: "C:\\Users\\appveyor\\erlang"

  rabbitmq_installer_download_url: "https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe"
  rabbitmq_installer_path: "C:\\Users\\appveyor\\rabbitmq-server-3.7.3.exe"

  matrix:
    - platform: x64
      PYTHON_VERSION: "2.7"
      INSTALLZMQ: 0
    - platform: x64
      PYTHON_VERSION: "2.7"
      YGG_ENABLE_LONG_TESTS: 1
    - platform: x64
      PYTHON_VERSION: "3.6"
      YGG_ENABLE_LONG_TESTS: 1
    - platform: x64
      PYTHON_VERSION: "3.6"
      YGG_RUN_EXAMPLES: 1
    - platform: x64
      PYTHON_VERSION: "3.6"
      YGG_ENABLE_LONG_TESTS: 1
      YGG_RUN_EXAMPLES: 1

install:
  - "SET MSVCVER=%APPVEYOR_BUILD_WORKER_IMAGE:~-2,2%"
  - "if %MSVCVER% gtr 11 set /a MSVCVER = MSVCVER - 1"
  - "SET VSINSTALLDIR=%ProgramFiles(x86)%\\Microsoft Visual Studio %MSVCVER%.0\\"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET MPLBACKEND=agg"
  - "SET ZMQINSTALLDIR=%APPVEYOR_BUILD_FOLDER%"
  - "git submodule update --init --recursive"

  # Setup Visual C++ toolset
  # TODO: Generic case. This is specific to 64bit VS 2015/2017 (14.0/16.0)
  - if "%MSVCVER%" == "16" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 /debug
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

  # Create a conda environment
  # - "conda update -q --yes conda"
  - "conda create -q --yes -n test python=%PYTHON_VERSION%"
  - "activate test"
  - "conda install --yes -c conda-forge r-base"

  # Download and install Rtools
  - ps: (new-object net.webclient).DownloadFile(
      "https://cran.rstudio.com/bin/windows/Rtools/Rtools35.exe",
      "C:\projects\rtools.exe")
  - C:\projects\rtools.exe /VERYSILENT /DIR=C:\Rtools
  - set PATH=c:\Rtools\bin;%PATH%
  # - set PATH=c:\Rtools\bin;c:\Rtools\gcc-4.6.3\bin;%PATH%

  # Check that we have the expected version of Python
  - "python --version"

  # Upgrade pip and setuptools and wheel to get clean install
  - "python -m pip install --upgrade pip"
  - "python -m pip install --upgrade wheel"
  - "python -m pip install --upgrade setuptools"

  # Install ZeroMQ
  - if "%INSTALLZMQ%" == "1" call "ci\\install-czmq-windows.bat"

  # Install & start RabbitMQ
  - "if %INSTALLRMQ% == 1 pip install \"pika<1.0\""
  - ps: If ($INSTALLRMQ -eq 1) { $webclient=New-Object System.Net.WebClient }
  - if "%INSTALLRMQ%" == "1" ECHO Downloading Erlang...
  - ps: If ($INSTALLRMQ -eq 1) { $webclient.DownloadFile("$env:erlang_download_url", "$env:erlang_exe_path") }
  - if "%INSTALLRMQ%" == "1" ECHO Starting Erlang...
  - if "%INSTALLRMQ%" == "1" start /B /WAIT %erlang_exe_path% /S /D=%erlang_home_dir%
  - if "%INSTALLRMQ%" == "1" set ERLANG_HOME=%erlang_home_dir%
  - if "%INSTALLRMQ%" == "1" ECHO Downloading RabbitMQ...
  - ps: If ($INSTALLRMQ -eq 1) { $webclient.DownloadFile("$env:rabbitmq_installer_download_url", "$env:rabbitmq_installer_path") }
  - if "%INSTALLRMQ%" == "1" ECHO Installing and starting RabbitMQ with default config...
  - if "%INSTALLRMQ%" == "1" start /B /WAIT %rabbitmq_installer_path% /S
  - ps: If ($INSTALLRMQ -eq 1) { (Get-Service -Name RabbitMQ).Status }

  # Install testing dependencies
  - "conda install --yes -c conda-forge numpy scipy"  # Installing via pip causes import error
  - "pip install -r requirements_testing.txt"

  # Install yggdrasil allowing pip to resolve requirements
  - "python setup.py sdist"
  - "dir dist\\*.tar.gz"
  - for %%a in ("dist\\*.tar.gz") do set YGGSDIST=%%a
  - echo %YGGSDIST%
  - "pip install --verbose %YGGSDIST%"
  # - "pip install --verbose -e ."
  - "python create_coveragerc.py"

cache:
  - '%LOCALAPPDATA%\pip\Cache -> setup.py'
  - 'C:\Users\appveyor\.yggdrasil.cfg -> setup.py'
  - libsodium    -> ci\install-czmq_windows.bat
  - libzmq       -> ci\install-czmq_windows.bat
  - build_libzmq -> ci\install-czmq_windows.bat
  - czmq         -> ci\install-czmq_windows.bat
  - build_czmq   -> ci\install-czmq_windows.bat

# Not a .NET project
build: false

before_test:
  - "ygginfo --verbose"
  - "flake8 yggdrasil"

test_script:
  - "type .coveragerc"
  - "if %YGG_RUN_EXAMPLES% == 0 yggtest -c setup.cfg --cov-config=.coveragerc"
  - "if ((%YGG_RUN_EXAMPLES% == 1) && (%YGG_ENABLE_LONG_TESTS% == 0)) yggtest -c setup.cfg --cov-config=.coveragerc examples --with-examples"
  - "if ((%YGG_RUN_EXAMPLES% == 1) && (%YGG_ENABLE_LONG_TESTS% == 1)) yggtest -c setup.cfg --cov-config=.coveragerc examples\\tests\\test_types.py --with-examples"

after_test:
  - "codecov"

# Deploy to PyPI
# on_success:
#   - echo "Starting Artifact Deployment"
#   - "pip install twine"
#   - "python setup.py bdist_wheel"

#   # Specify account details for PyPI
#   - echo [distutils]                                  > %USERPROFILE%\\.pypirc
#   - echo index-servers =                             >> %USERPROFILE%\\.pypirc
#   - echo     pypi                                    >> %USERPROFILE%\\.pypirc
#   - echo [pypi]                                      >> %USERPROFILE%\\.pypirc
#   - echo username=langmm                             >> %USERPROFILE%\\.pypirc
#   - echo password=%PYPI_PASSWORD%                    >> %USERPROFILE%\\.pypirc

#   # Workaround required to ensure setup.py finds the .pypirc under Windows
#   - set HOME=%USERPROFILE%

#   # Deploy wheel on tags
#   - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -And $env:APPVEYOR_REPO_BRANCH -eq "master") { Invoke-Expression "twine upload --skip-existing dist/*" 2>$null } Else { write-output "Not on a tag on master, won't deploy to pypi"}
#   # - if "%APPVEYOR_REPO_TAG%"=="true" ( python setup.py bdist_wheel upload ) else ( echo "Not deploying because not a tagged commit." )
