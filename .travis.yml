language: python
sudo: required
cache:
  pip: true
  directories:
    - $HOME/.ccache  # https://github.com/travis-ci/travis-ci/issues/5853

addons:
  apt:
    packages: &native_deps_apt
      - strace
      - valgrind
    update: true
  homebrew: &native_deps_brew
    packages:
      - valgrind
    update: true

os:
  - linux

python:
  - 3.6

env:
  global:
    NUMPY=numpy
    MATPLOTLIB=matplotlib
    MPLBACKEND=agg
    JSONSCHEMA=jsonschema
    INSTALLZMQ=1
    INSTALLRMQ=0
    INSTALLAPY=0
    INSTALLLPY=0
    INSTALLR=1
    INSTALLFORTRAN=1
    INSTALLSBML=1
    INSTALLTRIMESH=0
    INSTALLPYGMENTS=0
    YGG_SECOND_TEST=
    BUILDDOCS=0
    YGG_TEST_FLAGS="--test-suite=examples"
  matrix:
    - YGG_TEST_FLAGS="--test-suite=examples_part1 --test-suite=demos" INSTALLTRIMESH=1
    - YGG_TEST_FLAGS="--test-suite=examples_part2"
    - YGG_CONDA=yes YGG_TEST_FLAGS="--long-running" CC=gcc CFLAGS="-Wall -g" INSTALLRMQ=1 INSTALLAPY=1 INSTALLTRIMESH=1 INSTALLPYGMENTS=1 YGG_SECOND_TEST="yggtest --ci --default-comm=IPCComm --long-running"

before_install:
  - |
    echo Installing os level packages...;
    if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
       export PATH=/usr/lib/ccache:$PATH
    fi

    if [[ -n "$TRAVIS_PYTHON_VERSION" ]]; then
      if [[ -n "$YGG_CONDA" ]]; then
        export YGG_CONDA=$TRAVIS_PYTHON_VERSION
      else
        export YGG_PYTHON=$TRAVIS_PYTHON_VERSION
      fi
    fi
    echo "YGG_CONDA = $YGG_CONDA"
    echo "YGG_PYTHON = $YGG_PYTHON"

    # Install miniconda
    if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
      echo Installing Python using conda...;
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then MINICONDA_OS=Linux; else MINICONDA_OS=MacOSX; fi
      # At one point this saved time when testing in a Python 2.7 conda environment, but
      # recent version of conda build have issues when the base conda is not Python 3
      # wget https://repo.anaconda.com/miniconda/Miniconda${YGG_CONDA:0:1}-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      bash miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
      hash -r

      # Download and point to older SDK on OSX
      echo "TRAVIS_OS_NAME = ${TRAVIS_OS_NAME}"
      if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
        ./utils/setup_old_mac_sdk.sh
      fi
    fi

    # Install RabbitMQ & Start a server
    if [[ $INSTALLRMQ == '1' ]]; then
       if [[ $TRAVIS_OS_NAME == 'osx' || $TRAVIS_DIST == 'xenial' ]]; then
          echo Installing RabbitMQ...;
          if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
             brew install rabbitmq
          else
             sudo apt-get install rabbitmq-server
          fi
          ./utils/setup_rabbitmq.sh
       else
         # It has been installed via a service
         echo Checking rabbitmq status...;
         sudo rabbitmqctl status
       fi
    fi

    # Setup environment
    if [[ -n "$YGG_CONDA" ]]; then
      python utils/ci_setup.py conda env $YGG_CONDA
    else
      python utils/ci_setup.py pip env $YGG_PYTHON
    fi

    # Perform the conda build in the base environment
    if [[ -n "$YGG_CONDA" ]]; then
      python utils/ci_setup.py conda build --python $YGG_CONDA
    fi

    # Activate environment
    if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
      source activate test-environment
      if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
        export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH
      fi
    fi
    if [[ -n "$YGG_PYTHON" && $TRAVIS_OS_NAME == 'osx' ]]; then
      source venv/bin/activate
    fi

install:
  - |
    # setup environment
    if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
      ccache -s
    fi

    # Build and install
    if [[ -n "$YGG_CONDA" ]]; then
      travis_wait python utils/ci_setup.py conda deploy --without-build
      python utils/ci_setup.py conda verify
    else
      if [[ $INSTALLR == '1' ]]; then
        export YGG_USE_SUDO_FOR_R=1
      fi
      python utils/ci_setup.py pip deploy
      python utils/ci_setup.py pip verify
    fi

script:
  - yggtest --ci $YGG_TEST_FLAGS
  - $YGG_SECOND_TEST


after_success:
  - |
    codecov


stages:
  - warm-up
  - test
  - test-with-cache
  - deploy


jobs:
  fast_finish: true
  include:
    # Tests
    - stage: test
      os: linux
      env: YGG_TEST_FLAGS="--test-suite=types --languages matlab python cpp"
      python: 3.7
      dist: xenial
      sudo: true
    - os: linux
      env: YGG_TEST_FLAGS="--test-suite=types --languages R c --skip-languages cpp"
      python: 3.7
      dist: xenial
      sudo: true
    - os: linux
      env: YGG_TEST_FLAGS="--test-suite=types --languages fortran"
      python: 3.7
      dist: xenial
      sudo: true
    - os: linux
      env: YGG_TEST_FLAGS="--test-suite=timing tests/test_multitasking.py" YGG_DEFAULT_COMM=ZMQComm
      python: 3.7
      dist: xenial
      sudo: true
    - os: osx
      python: 3.6
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
          - $HOME/R/Library
      env: YGG_PYTHON=3.6 R_LIBS_USER=$HOME/R/Library YGG_TEST_FLAGS="tests/test_tools.py --test-suite=types --languages R c" INSTALLR=0 INSTALLFORTRAN=0
    - os: osx
      python: 3.7
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
      env: YGG_CONDA=3.7 YGG_TEST_FLAGS="serialize --test-suite=examples_part1 communication/tests/test_IPCComm.py communication/tests/test_RMQAsyncComm.py --test-suite=timing" INSTALLZMQ=0
      script:
        - yggconfig --remove-file
        - yggtest --ci tests/test_config.py $YGG_TEST_FLAGS
      
    - name: "Build docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Docs
    - stage: deploy
      name: "Deploy docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      if: (tag IS present)
      deploy:
        provider: pages
        skip_cleanup: true
        local_dir: docs/build/html/
        keep-history: true
        github_token: $GITHUB_TOKEN  # Set in travis-ci.org dashboard
        on:
          tags: true
        verbose: true
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Deploy
    - stage: deploy
      name: "Deploy to PyPI"
      script: skip
      if: (tag IS present)
      deploy:
        provider: pypi
        skip_existing: true
        distributions: sdist bdist_wheel --universal
        username: "__token__"
        password:
          secure: "iRsnZ8i1fWoqZVQd7LzX8L+z3aS/c1io/tUHApJE8ujHdNF7owtLyg1JG9eUWdinfApv0WS7uaoUxdM44I3eMpFdsXBXCEcQZ77ZQEJ5kO+QqqSfPX6BO/hKTcckuw3UMWYMxWk7BmreUFBFwV1vx5/o0Wv+vql968+zhHILtWnaW+1jhDwHn2FmUZ9ESXww87FyJhcpvvsCQOXBTKEWN2AOToLaU4NWvzrHi5B7Vr9+4rZ70HyUwCIhb53ktZ+3Xn0zZwbf5or7XbRPrkfiVHqX2ywfa2lQU+59KHwXG0UHt8cSqvD08Tig3QgFO76SAsLXaJ+GI1YPTJ/Q/2xC+5N5tWDi1wL8SXmetjnku3/PGk9tfljVbMVErDLq8Vchra/w8AQ1EAyyhV4xBRIWJr/PlwsjxHB+qNnJ5S/x/0ZeSylUsPlQNTsqRqHdMYNJR1m1/pJqzZ6WURMVW2A341fRHHZNFQDNFePWvEA1qWKmeCWkKeKAu22TbIl0YlIX4m/y87BfjuHq4pditoIMws5K9SH4HVgrm4Kcqo8JlYN8bsTDlKw0ydtHZAYnh2BS6KHaCQqM+03/8yBrnrP0nzei1qkFVfAoAKcPMIsEYcPcme9MgJG5j/pAAzY1VeY52zgc7F9FRVmufKxEfro2Gcid/PW0reaPZgqD98B+ubo="
        on:
          tags: true
