language: python
sudo: required
cache:
  pip: true
  directories:
    - $HOME/.ccache  # https://github.com/travis-ci/travis-ci/issues/5853

addons:
  apt:
    packages: &native_deps_apt
      - strace
      - valgrind
    update: true
  homebrew: &native_deps_brew
    packages:
      - valgrind
    update: true

os:
  - linux

python:
  - 2.7
  - 3.6

env:
  global:
    NUMPY=numpy
    MATPLOTLIB=matplotlib
    MPLBACKEND=agg
    JSONSCHEMA=jsonschema
    INSTALLZMQ=1
    INSTALLRMQ=0
    INSTALLAPY=0
    INSTALLLPY=0
    INSTALLR=1
    BUILDDOCS=0
    YGG_RUN_EXAMPLES=0
    YGG_ENABLE_LONG_TESTS=0
    YGG_TYPES_LANGUAGES=
  matrix:
    - YGG_ENABLE_LONG_TESTS=1
    - YGG_RUN_EXAMPLES=1
    - YGG_CONDA=yes

before_install:
  - |
    echo Installing os level packages...;
    if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
       export PATH=/usr/lib/ccache:$PATH
    fi

    if [[ -n "$TRAVIS_PYTHON_VERSION" ]]; then
      if [[ -n "$YGG_CONDA" ]]; then
        export YGG_CONDA=$TRAVIS_PYTHON_VERSION
      else
        export YGG_PYTHON=$TRAVIS_PYTHON_VERSION
      fi
    fi
    echo "YGG_CONDA = $YGG_CONDA"
    echo "YGG_PYTHON = $YGG_PYTHON"

    # Install from source in virtual env
    if [[ -n "$YGG_PYTHON" && $TRAVIS_OS_NAME == 'osx' ]]; then
      echo Installing Python using virtualenv...;
      if [[ "$TRAVIS_OS_NAME" == "osx" && "${YGG_PYTHON:0:1}" == "3" ]]; then
         brew install python3;
      fi
      pip install --upgrade pip virtualenv
      virtualenv -p python$YGG_PYTHON venv
      source venv/bin/activate
    fi

    # Install from conda in conda env
    if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
      echo Installing Python using conda...;
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then MINICONDA_OS=Linux; else MINICONDA_OS=MacOSX; fi
      # At one point this saved time when testing in a Python 2.7 conda environment, but
      # recent version of conda build have issues when the base conda is not Python 3
      # wget https://repo.anaconda.com/miniconda/Miniconda${YGG_CONDA:0:1}-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      bash miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
      hash -r
      conda config --set always_yes yes --set changeps1 no
      conda config --set channel_priority strict
      conda config --add channels conda-forge
      conda update -q conda
      if [[ -n "$YGG_CONDA" ]]; then
        conda create -q -n test-environment python=$YGG_CONDA
      else
        conda create -q -n test-environment python=$YGG_PYTHON
      fi
      source activate test-environment
      conda install -q conda-build conda-verify
      pip uninstall -y numpy
      pip uninstall -y matplotlib
      conda info -a

      echo "TRAVIS_OS_NAME = ${TRAVIS_OS_NAME}"
      if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
        # Install older Mac SDK so that conda llvm (7) can be used
        # https://github.com/conda-forge/mpi-feedstock/issues/4
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.9}
        export CONDA_BUILD_SYSROOT="$(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
        export SDKROOT=${CONDA_BUILD_SYSROOT}
        echo "MACOSX_DEPLOYMENT_TARGET = ${MACOSX_DEPLOYMENT_TARGET}"
        echo "CONDA_BUILD_SYSROOT = ${CONDA_BUILD_SYSROOT}"
        echo "SDKROOT = ${SDKROOT}"

        if [[ ! -d ${CONDA_BUILD_SYSROOT} || "$OSX_FORCE_SDK_DOWNLOAD" == "1" ]]; then
          echo "Downloading ${MACOSX_DEPLOYMENT_TARGET} sdk to ${CONDA_BUILD_SYSROOT}"
          curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz
          tar -xf MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz -C "$(dirname "$CONDA_BUILD_SYSROOT")"
          ls "$(dirname "$CONDA_BUILD_SYSROOT")"
          # set minimum sdk version to our target
          plutil -replace MinimumSDKVersion -string ${MACOSX_DEPLOYMENT_TARGET} $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
          plutil -replace DTSDKName -string macosx${MACOSX_DEPLOYMENT_TARGET}internal $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
          printf "CONDA_BUILD_SYSROOT:\n  - ${CONDA_BUILD_SYSROOT}  # [osx]\n" > ~/conda_build_config.yaml
        fi
      fi

    fi
    
    # Install r-base from conda, apt, or homebrew
    if [[ $INSTALLR == '1' ]]; then
      if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
        if [[ $INSTALLLPY == '1' ]]; then
          conda install r-base
        fi
      elif [[ -n "$YGG_PYTHON" ]]; then
        export YGG_USE_SUDO_FOR_R=1
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          sudo apt-get install r-base
          sudo apt-get install libudunits2-dev
        elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          brew install r
          brew install udunits
        fi
      fi
    fi

    # Install AstroPy
    if [[ $INSTALLAPY == '1' ]]; then
       echo Installing AstroPy...;
       if [[ -n "$YGG_PYTHON" ]]; then
         pip install astropy
       elif [[ -n "$YGG_CONDA" ]]; then
         conda install astropy
       fi
    fi

    # Install LPy
    if [[ $INSTALLLPY == '1' ]]; then
       echo Installing LPy...;
       sh ci/install-lpy-linux.sh
    fi

    # Install ZeroMQ
    if [[ $INSTALLZMQ == '1' && -n "$YGG_PYTHON" ]]; then
       echo Installing ZeroMQ...;
       if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
          sh ci/install-czmq-osx.sh
       else
          sh ci/install-czmq-linux.sh
       fi
    fi

    # Install RabbitMQ & Start a server
    if [[ $INSTALLRMQ == '1' ]]; then
       if [[ $TRAVIS_OS_NAME == 'osx' || $TRAVIS_DIST == 'xenial' ]]; then
          echo Installing RabbitMQ...;
          if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
             brew install rabbitmq
          else
             sudo apt-get install rabbitmq-server
          fi
          echo Starting RabbitMQ...;
          export PATH="${PATH}:/usr/local/sbin";
          sudo /bin/sh -c "RABBITMQ_PID_FILE=$TRAVIS_BUILD_DIR/rabbitmq.pid rabbitmq-server &"
          sudo rabbitmqctl wait "$TRAVIS_BUILD_DIR/rabbitmq.pid"
       fi
       echo Checking rabbitmq status...;
       sudo rabbitmqctl status

       echo Installing Pika...;
       if [[ -n "$YGG_PYTHON" ]]; then
         pip install "pika<1.0.0b1"
       elif [[ -n "$YGG_CONDA" ]]; then
         conda install "pika<1.0.0b1"
       fi
    fi

    # Temp fix to install missing dependencies from jsonschema dependency
    if [[ -n "$YGG_CONDA" && "${YGG_CONDA:0:1}" == "2" ]]; then
      conda install contextlib2 pathlib2 "configparser >=3.5"
    fi

install:
  - |
    # setup environment
    ccache -s
    # Upgrade pip and setuptools and wheel to get clean install
    pip install --upgrade pip
    pip install --upgrade wheel
    pip install --upgrade setuptools
    # Install yggdrasil
    if [[ -n "$YGG_PYTHON" ]]; then
      # May need to uninstall conda version of numpy and matplotlib on LPy test
      pip install $NUMPY
      pip install $MATPLOTLIB
      pip install $JSONSCHEMA
      pip install -r requirements_testing.txt
      if [[ $BUILDDOCS == '1' ]]; then
        pip install -r requirements_documentation.txt
      fi
      # Install from source dist
      python setup.py sdist
      pip install --verbose dist/*.tar.gz
      # Install from source
      # pip install --verbose -e .
      pip list
    elif [[ -n "$YGG_CONDA" ]]; then
      conda install $NUMPY $MATPLOTLIB $JSONSCHEMA
      python utils/install_from_requirements.py conda requirements_testing.txt
      if [[ $BUILDDOCS == '1' ]]; then
        python utils/install_from_requirements.py conda requirements_documentation.txt
      fi
      conda build recipe/meta.yaml --python $YGG_CONDA
      # --use-local not working in
      #  - conda 4.7.5, conda-build 3.17.8, Python 2.7, 3.6, or 3.7
      conda --version
      conda index ${CONDA_PREFIX}/conda-bld
      conda install -c file:/${CONDA_PREFIX}/conda-bld yggdrasil
      # if [[ "$YGG_CONDA" == "3.7" ]]; then
      #   # conda install -c local yggdrasil
      #   conda install -c ${CONDA_PREFIX}/conda-bld/ yggdrasil
      # else
      #   conda install -c ${CONDA_PREFIX}/conda-bld/ yggdrasil
      # fi
      conda list
    fi

script:
  - sh ci/pretest_script.sh || travis_terminate 1;
  - |
    if [[ $YGG_RUN_EXAMPLES == '1' ]]; then
      if [[ $YGG_ENABLE_LONG_TESTS == '1' ]]; then
        yggtest -c setup.cfg --cov-config=.coveragerc examples/tests/test_types.py --with-examples --language $YGG_TYPES_LANGUAGES
      else
        yggtest -c setup.cfg --cov-config=.coveragerc examples --with-examples
      fi
    else
      if [[ $YGG_ENABLE_LONG_TESTS == '1' ]]; then
        yggtest -c setup.cfg --cov-config=.coveragerc examples/tests/test_timing.py
      else
        yggtest -c setup.cfg --cov-config=.coveragerc
      fi
    fi


after_success:
  - |
    coveralls
    codecov


jobs:
  fast_finish: true
  allow_failures:
    - os: linux
      python: 3.8-dev
      dist: xenial
      sudo: true
  include:

    # Tests
    - stage: test
      os: linux
      python: 2.7
      dist: trusty
      env: NUMPY=numpy==1.13.0 MATPLOTLIB=matplotlib==1.5.3 JSONSCHEMA=jsonschema==2.6.0 INSTALLZMQ=0 INSTALLRMQ=1 INSTALLLPY=1 INSTALLR=0
      services:
        - rabbitmq
    - os: linux
      python: 3.4
      env: YGG_ENABLE_LONG_TESTS=1
      script:
        - sh ci/pretest_script.sh || travis_terminate 1;
        - yggconfig --remove-file
        - yggtest -c setup.cfg --cov-config=.coveragerc tests/test_backwards.py
    - os: linux
      python: 3.6
      env: INSTALLAPY=1 INSTALLZMQ=0 INSTALLRMQ=1 YGG_SKIP_COMPONENT_VALIDATION=0
    # Python >=3.7 requires special dist
    - os: linux
      python: 3.6
      env: YGG_DEFAULT_COMM=ZMQComm YGG_ENABLE_LONG_TESTS=1 YGG_TEST_PRODUCTION_RUNS=1
      dist: xenial
      sudo: true
    - os: linux
      python: 3.6
      env: YGG_ENABLE_LONG_TESTS=1 YGG_RUN_EXAMPLES=1 YGG_TYPES_LANGUAGES="r c cpp"
    - os: linux
      python: 3.6
      env: YGG_ENABLE_LONG_TESTS=1 YGG_RUN_EXAMPLES=1 YGG_TYPES_LANGUAGES="matlab python"
    - os: linux
      python: 3.8-dev
      dist: xenial
      sudo: true

    # Only ever test one python 2 and one python 3 because brew dosn't allow specification of python version
    - os: osx
      python: 2.7
      env: YGG_PYTHON=2.7 YGG_ENABLE_LONG_TESTS=1
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
    - os: osx
      python: 3.7
      env: YGG_CONDA=3.7 INSTALLRMQ=1 YGG_ENABLE_LONG_TESTS=1
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
    - name: "Build docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Docs
    - stage: deploy
      name: "Deploy docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      if: (tag IS present)
      deploy:
        provider: pages
        skip_cleanup: true
        local_dir: docs/build/html/
        keep-history: true
        github_token: $GITHUB_TOKEN  # Set in travis-ci.org dashboard
        on:
          tags: true
        verbose: true
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Deploy
    - stage: deploy
      name: "Deploy to PyPI"
      script: skip
      if: (tag IS present)
      deploy:
        provider: pypi
        skip_existing: true
        distributions: sdist bdist_wheel --universal
        user: langmm
        password:
          secure: cYP65ktykU8vzNpjDxVJ7hb5VIA8pcG0+LfaboyJ/7jJ85OFFMb7k12cuzmcFgyCMzxaMaR74ZwSL1Zs3jwfpsfKt22rdXV3YtAlrbLfHDd1ReoPeg6ZHSHYlZq/pkGowB7OHZMPaF7Pwjl2igWE1ZrJ8q/K2vVCt/cv9JhZXZS3nnC3iTY9jbvq/sWp6QChy61s5ekxf9m3PJBcS3s/n34ZyuQt8eF73YSMlztWNLTBWKIfK2LOpDXXKDWhFRDhlmt3mA88I2HI1ZxFyANIrrMwGEBIJOVWlAfnPOdoI36JW9wqv3DXj9RGVDNcVwfW5/juxMF+DSHORwQDuTn3E6Z0Q/ic6rLndI+vzHjYdjPeLXutggOEGTjq32LP6FkJ+3LyrFoQXwZIZ+FqLRni/HyppoyIQ+S5NneLB7Wj5Hyja7ycmwLZnlnixUz3qHOvIv6Hpv/koDltqyB5gzf0xvbNUMkRCHuuovtbqtmRtxA1BL8VKoGVzZ7zHrWG+iTGZXSFhgrcO1k8OYzxaWR2O/NeeURuy3ViD+xzPSvMASRX0sCULOf3o2rgDdJyTBjW5KZcLqVcOiGZoHgwOjZY0NQ50R7mE7T+CQmoYtil1Ovmm8b6NUhoE0z6jEgDVfEhKo9/WACHamzIQ4afrYsEWlQhDSg+dvrzS7OciILOK+Q=
        on:
          tags: true
