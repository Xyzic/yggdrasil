name: Python Package using Conda

on:
  push:
    branches-ignore:
      - 'gh-pages'

env:
  NUMPY: numpy
  MATPLOTLIB: matplotlib
  MPLBACKEND: agg
  JSONSCHEMA: jsonschema
  INSTALLR: 1
  INSTALLC: 1
  INSTALLFORTRAN: 1
  INSTALLSBML: 1
  INSTALLLPY: 0
  INSTALLZMQ: 1
  INSTALLRMQ: 0
  INSTALLTRIMESH: 1
  INSTALLPYGMENTS: 1
  BUILDDOCS: 0

jobs:
  build_pip:
    name: Build (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method }})
    runs-on: ${{ matrix.os }}
    # env:
    #   INSTALLRMQ: 1
    strategy:
      max-parallel: 5
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6]
        install-method: [pip]
        # exclude:
        #   - os: windows-latest
        #     python-version: 3.6
        #     install-method: pip
      fail-fast: false
    # services:
    #   rabbitmq:
    #     image: rabbitmq:latest
    #     ports:
    #       - 5672/tcp
    #     options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    # - name: Turn on RabbitMQ installation
    #   if: matrix.installrmq == true && matrix.os != 'windows-latest'
    #   run: echo "INSTALLRMQ=1" >> $GITHUB_ENV
    # - name: Turn on RabbitMQ installation
    #   if: matrix.installrmq == true && matrix.os == 'windows-latest'
    #   run: echo "INSTALLRMQ=1" | Out-File -FilePath $env:GITHUB_PATH -Append
    - name: Turn off C installation on Windows
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip'
      run: echo "INSTALLC=0" | Out-File -FilePath $env:GITHUB_PATH -Append
      # run: echo "INSTALLC=0" >> $GITHUB_ENV
    - name: Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && env.INSTALLC == 1
    - name: Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} deploy
    # - name: Start RabbitMQ Server
    #   if: env.INSTALLRMQ == 1 && matrix.os != 'windows-latest'
    #   run: |
    #     ./utils/setup_rabbitmq.sh
    - name: Verify installation
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} verify
    - name: Non-example tests
      run: |
        yggtest --ci
    - name: Example tests
      run: |
        yggtest --ci --with-examples
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
  build_conda:
    name: Build (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method }})
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 5
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6]
        install-method: [conda]
        include:
          - os: ubuntu-latest
            python-version: 3.8
            install-method: conda
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && env.INSTALLC == 1
    - name: Set up miniconda
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        # channel-priority: strict
        use-only-tar-bz2: true
    - name: Add miniconda bin to path (Unix)
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: |
        echo "PATH=$HOME/miniconda/bin:$PATH" >> $GITHUB_ENV
    - name: Add miniconda bin to path (Windows)
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
        echo "PATH=$HOME/miniconda/bin:$PATH" >> $GITHUB_ENV
    # - name: Add miniconda bin to path (Windows)
    #   if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
    #   run: |
    #     echo "PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%" | Out-File -FilePath $env:GITHUB_PATH -Append
    - name: Install old MacOSX SDK for compatibility with the conda llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      shell: bash -l {0}
      run: |
        ./utils/setup_old_mac_sdk.sh
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} deploy
    - name: Start RabbitMQ Server
      if: env.INSTALLRMQ == 1 && matrix.os != 'windows-latest'
      shell: bash -l {0}
      run: |
        ./utils/setup_rabbitmq.sh
    - name: Verify installation
      shell: bash -l {0}
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} verify
    - name: Non-example tests
      shell: bash -l {0}
      run: |
        yggtest --ci
    - name: Example tests
      shell: bash -l {0}
      run: |
        yggtest --ci --with-examples
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
  docs:
    name: Build the Docs
    runs-on: ubuntu-latest
    env:
      BUILDDOCS: 1
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python utils/ci_setup.py pip deploy
    - name: Verify installation
      run: |
        python utils/ci_setup.py pip verify
    - name: Build the docs
      run: |
        cd docs
        make autodoc
        cd ../
    - name: Publish docs to Github pages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: docs/build/html/
  deploy:
    name: Publish package
    needs: [build_pip, build_conda, docs]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python utils/ci_setup.py pip deploy
    - name: Verify installation
      run: |
        python utils/ci_setup.py pip verify
    - name: Build the package
      run: |
        python setup.py sdist
        python setup.py bdist_wheel
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true
        
