name: Python Package using Conda

on:
  push:
    branches-ignore:
      - 'gh-pages'

jobs:
  build:
    name: Build (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method }})
    env:
      NUMPY: numpy
      MATPLOTLIB: matplotlib
      MPLBACKEND: agg
      JSONSCHEMA: jsonschema
      INSTALLR: 1
      INSTALLC: 1
      INSTALLFORTRAN: 1
      INSTALLSBML: 1
      INSTALLLPY: 0
      INSTALLZMQ: 1
      INSTALLRMQ: 0
      INSTALLTRIMESH: 1
      INSTALLPYGMENTS: 1
      BUILDDOCS: 0
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 5
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6]
        install-method: [pip, conda]
        include:
          - os: ubuntu-latest
            python-version: 3.8
            install-method: conda
        # exclude:
        #   - os: windows-latest
        #     python-version: 3.6
        #     install-method: pip
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest'
    - name: Set up miniconda
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
    - name: Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install old MacOSX SDK for compatibility with the conda llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      shell: bash -l {0}
      run: |
        ./utils/setup_old_mac_sdk.sh
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} deploy
    - name: Start RabbitMQ Server
      if: env.INSTALLRMQ == 1
      shell: bash -l {0}
      run: |
        ./utils/setup_rabbitmq.sh
    - name: Verify installation
      shell: bash -l {0}
      run: |
        python utils/ci_setup.py ${{ matrix.install-method }} verify
    - name: Non-example tests
      shell: bash -l {0}
      run: |
        yggtest --ci
    - name: Example tests
      shell: bash -l {0}
      run: |
        yggtest --ci --with-examples
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
  docs:
    name: Build the Docs
    runs-on: ubuntu-latest
    env:
      INSTALLR: 1
      INSTALLC: 1
      INSTALLFORTRAN: 1
      INSTALLSBML: 1
      INSTALLLPY: 0
      INSTALLZMQ: 1
      INSTALLRMQ: 0
      BUILDDOCS: 1
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python utils/ci_setup.py pip deploy
    - name: Verify installation
      run: |
        python utils/ci_setup.py pip verify
    - name: Build the docs
      run: |
        cd docs
        make autodoc
        cd ../
    - name: Publish docs to Github pages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: docs/build/html/
  deploy:
    name: Publish package
    needs: [build, docs]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python utils/ci_setup.py pip deploy
    - name: Verify installation
      run: |
        python utils/ci_setup.py pip verify
    - name: Build the package
      run: |
        python setup.py sdist
        python setup.py bdist_wheel
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true
        
