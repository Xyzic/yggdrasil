name: Python Package using Conda

on:
  push:
    branches-ignore:
      - 'gh-pages'

env:
  NUMPY: numpy
  MATPLOTLIB: matplotlib
  MPLBACKEND: agg
  JSONSCHEMA: jsonschema
  INSTALLR: 1
  INSTALLC: 1
  INSTALLFORTRAN: 1
  INSTALLSBML: 1
  INSTALLLPY: 0
  INSTALLZMQ: 1
  INSTALLRMQ: 0
  INSTALLTRIMESH: 1
  INSTALLPYGMENTS: 1
  BUILDDOCS: 0

jobs:
  test:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method }}, ${{ matrix.test-flags }}), Install C = ${{ matrix.install-c }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 20
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6]
        install-method: [pip]
        test-flags: [--long-running, --test-suite=examples]
        install-c: [true]
        include:
          - os: windows-latest
            python-version: 3.6
            install-method: pip
            test-flags: --long-running
            install-c: false
          - os: ubuntu-latest
            python-version: 3.8
            install-method: conda
            test-flags: --long-running
            install-c: true
          - os: ubuntu-latest
            python-version: 3.6
            install-method: conda
            test-flags: --long-running
            install-c: true
          - os: macos-latest
            python-version: 3.6
            install-method: conda
            test-flags: --long-running
            install-c: true
          - os: windows-latest
            python-version: 3.6
            install-method: conda
            test-flags: --long-running
            install-c: true
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}

    steps: &steps
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      shell: bash -l {0}
      run: echo "INSTALLC=0" >> $GITHUB_ENV
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
        echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV
        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV
    - name: (WINDOWS) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && env.INSTALLC == 1
      with:
        toolset: 14.0

    # ========================================================
    # Pip specific installation steps
    # ========================================================
    # - name: (WINDOWS,PIP) Set VCPKG_ROOT on Windows
    #   if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC == 1
    #   shell: bash -l {0}
    #   run: echo "VCPKG_ROOT=C:\\vcpkg" >> $GITHUB_ENV
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC == 1
      shell: bash -l {0}
      run: yggconfig --vcpkg-dir=C:\\vcpkg
      
    # ========================================================

    # ========================================================
    # Conda specific installation steps
    # ========================================================
    - name: (CONDA) Cache conda
      uses: actions/cache@v1
      if: matrix.install-method == 'conda'
      env:
        # Increase this value to reset cache if file not changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
          hashFiles('recipe/meta.yaml') }}
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
        # auto-activate-base: false
    # This step might need to stay here so that dev prompt comes before
    # conda?
    # - name: (WINDOWS,CONDA) Set up MSVC Compiler
    #   uses: ilammy/msvc-dev-cmd@v1
    #   if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC == 1
    # This step and the next allows conda to be called before the
    # conda-incubator/setup-miniconda@v2 action is used to create the
    # test environment so that the package can be built in the base
    # environment.
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      shell: bash
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
    - name: (CONDA) Build package in base environment
      if: matrix.install-method == 'conda'
      shell: bash --noprofile --norc -eo pipefail {0}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python ${{ matrix.python-version }}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        # TODO: Move autoupdate into script?
        # auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    # ========================================================
    
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run tests
      run: yggtest --ci ${{ matrix.test-flags }}
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
    # - name: Start SSH session
    #   uses: luchihoratiu/debug-via-ssh@main
    #   if: ${{ failure() }}
    #   with:
    #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    #     SSH_PASS: ${{ secrets.SSH_PASS }}

  test_rmq:
    name: Test RMQ (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method }})
    runs-on: ${{ matrix.os }}
    env:
      INSTALLRMQ: 1
      INSTALLAPY: 1
    strategy:
      max-parallel: 5
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6]
        install-method: [pip,conda]
        test-flags: [--long-running]
      fail-fast: false
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        shell: bash -l {0}
    steps: *steps
    
  docs:
    name: Build the Docs
    runs-on: ubuntu-latest
    env:
      BUILDDOCS: 1
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Build the docs
      run: |
        cd docs
        make autodoc
        cd ../
    - name: Publish docs to Github pages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: docs/build/html/
  deploy:
    name: Publish package
    needs: [build_pip, build_rmq, docs]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Build the package
      run: |
        python setup.py sdist
        python setup.py bdist_wheel
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true
        
